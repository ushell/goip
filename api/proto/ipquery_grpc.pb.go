// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/proto/ipquery.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IPQueryService_QueryIP_FullMethodName          = "/ipquery.IPQueryService/QueryIP"
	IPQueryService_BatchQueryIP_FullMethodName     = "/ipquery.IPQueryService/BatchQueryIP"
	IPQueryService_GetServiceStatus_FullMethodName = "/ipquery.IPQueryService/GetServiceStatus"
)

// IPQueryServiceClient is the client API for IPQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IP查询服务定义
type IPQueryServiceClient interface {
	// 查询单个IP地址信息
	QueryIP(ctx context.Context, in *QueryIPRequest, opts ...grpc.CallOption) (*QueryIPResponse, error)
	// 批量查询IP地址信息
	BatchQueryIP(ctx context.Context, in *BatchQueryIPRequest, opts ...grpc.CallOption) (*BatchQueryIPResponse, error)
	// 获取服务状态
	GetServiceStatus(ctx context.Context, in *GetServiceStatusRequest, opts ...grpc.CallOption) (*GetServiceStatusResponse, error)
}

type iPQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIPQueryServiceClient(cc grpc.ClientConnInterface) IPQueryServiceClient {
	return &iPQueryServiceClient{cc}
}

func (c *iPQueryServiceClient) QueryIP(ctx context.Context, in *QueryIPRequest, opts ...grpc.CallOption) (*QueryIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryIPResponse)
	err := c.cc.Invoke(ctx, IPQueryService_QueryIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPQueryServiceClient) BatchQueryIP(ctx context.Context, in *BatchQueryIPRequest, opts ...grpc.CallOption) (*BatchQueryIPResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchQueryIPResponse)
	err := c.cc.Invoke(ctx, IPQueryService_BatchQueryIP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPQueryServiceClient) GetServiceStatus(ctx context.Context, in *GetServiceStatusRequest, opts ...grpc.CallOption) (*GetServiceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetServiceStatusResponse)
	err := c.cc.Invoke(ctx, IPQueryService_GetServiceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPQueryServiceServer is the server API for IPQueryService service.
// All implementations must embed UnimplementedIPQueryServiceServer
// for forward compatibility.
//
// IP查询服务定义
type IPQueryServiceServer interface {
	// 查询单个IP地址信息
	QueryIP(context.Context, *QueryIPRequest) (*QueryIPResponse, error)
	// 批量查询IP地址信息
	BatchQueryIP(context.Context, *BatchQueryIPRequest) (*BatchQueryIPResponse, error)
	// 获取服务状态
	GetServiceStatus(context.Context, *GetServiceStatusRequest) (*GetServiceStatusResponse, error)
	mustEmbedUnimplementedIPQueryServiceServer()
}

// UnimplementedIPQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIPQueryServiceServer struct{}

func (UnimplementedIPQueryServiceServer) QueryIP(context.Context, *QueryIPRequest) (*QueryIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIP not implemented")
}
func (UnimplementedIPQueryServiceServer) BatchQueryIP(context.Context, *BatchQueryIPRequest) (*BatchQueryIPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryIP not implemented")
}
func (UnimplementedIPQueryServiceServer) GetServiceStatus(context.Context, *GetServiceStatusRequest) (*GetServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceStatus not implemented")
}
func (UnimplementedIPQueryServiceServer) mustEmbedUnimplementedIPQueryServiceServer() {}
func (UnimplementedIPQueryServiceServer) testEmbeddedByValue()                        {}

// UnsafeIPQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPQueryServiceServer will
// result in compilation errors.
type UnsafeIPQueryServiceServer interface {
	mustEmbedUnimplementedIPQueryServiceServer()
}

func RegisterIPQueryServiceServer(s grpc.ServiceRegistrar, srv IPQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedIPQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IPQueryService_ServiceDesc, srv)
}

func _IPQueryService_QueryIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPQueryServiceServer).QueryIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPQueryService_QueryIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPQueryServiceServer).QueryIP(ctx, req.(*QueryIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPQueryService_BatchQueryIP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryIPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPQueryServiceServer).BatchQueryIP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPQueryService_BatchQueryIP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPQueryServiceServer).BatchQueryIP(ctx, req.(*BatchQueryIPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPQueryService_GetServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPQueryServiceServer).GetServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IPQueryService_GetServiceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPQueryServiceServer).GetServiceStatus(ctx, req.(*GetServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPQueryService_ServiceDesc is the grpc.ServiceDesc for IPQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipquery.IPQueryService",
	HandlerType: (*IPQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueryIP",
			Handler:    _IPQueryService_QueryIP_Handler,
		},
		{
			MethodName: "BatchQueryIP",
			Handler:    _IPQueryService_BatchQueryIP_Handler,
		},
		{
			MethodName: "GetServiceStatus",
			Handler:    _IPQueryService_GetServiceStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/ipquery.proto",
}
